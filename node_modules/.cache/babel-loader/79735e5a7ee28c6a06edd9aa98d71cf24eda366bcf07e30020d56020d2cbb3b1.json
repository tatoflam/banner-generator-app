{"ast":null,"code":"var _jsxFileName = \"/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n_c = RefinerContainer;\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n_c2 = Button;\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n_c3 = StatusMessage;\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n_c4 = ApiKeyInput;\nconst PromptTextarea = styled.textarea`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  min-height: 100px;\n  resize: vertical;\n  font-family: Arial, sans-serif;\n`;\n_c5 = PromptTextarea;\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n`;\n_c6 = Label;\nfunction AIRefiner({\n  logoRef,\n  onRefinementComplete\n}) {\n  _s();\n  const [apiKey, setApiKey] = useState('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');\n  const [userPrompt, setUserPrompt] = useState('Enhance this logo by making it more professional and polished. Maintain the original style and colors but improve the overall quality and visual appeal.');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Use html-to-image to capture the logo element\n      const logoElement = logoRef.current;\n      if (!logoElement) {\n        throw new Error('Logo element not found');\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n\n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n\n      // Convert data URL to Blob for OpenAI API\n      const fetchResponse = await fetch(dataUrl);\n      const blob = await fetchResponse.blob();\n\n      // Create a File object from the Blob\n      const imageFile = new File([blob], 'logo.png', {\n        type: 'image/png'\n      });\n\n      // Get the dimensions of the logo element\n      const width = logoElement.clientWidth;\n      const height = logoElement.clientHeight;\n\n      // Create a transparent mask image with the same dimensions\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n\n      // Fill with transparent pixels (alpha = 0)\n      ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n      ctx.fillRect(0, 0, width, height);\n\n      // Add a small non-transparent area in the corner to ensure the mask is valid\n      // This is a workaround as some APIs require non-empty masks\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n      ctx.fillRect(width - 10, height - 10, 10, 10);\n\n      // Convert canvas to blob\n      const maskBlob = await new Promise(resolve => {\n        canvas.toBlob(resolve, 'image/png');\n      });\n\n      // Create a File object for the mask\n      const maskFile = new File([maskBlob], 'mask.png', {\n        type: 'image/png'\n      });\n\n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // System prompt to guide the AI behavior\n      const systemPrompt = \"You are an expert logo designer. Edit the provided image according to the user's instructions while preserving the original style and dimensions. Focus on enhancing the existing design rather than creating something completely new.\";\n\n      // Combine system prompt with user prompt\n      const fullPrompt = `${systemPrompt}\\n\\nUser request: ${userPrompt}`;\n      console.log('Sending request to OpenAI image edit API with:', {\n        imageSize: `${width}x${height}`,\n        promptLength: fullPrompt.length\n      });\n\n      // Call OpenAI API to edit the logo image using the direct endpoint\n      try {\n        // Create FormData for the API request\n        const formData = new FormData();\n        formData.append('image', imageFile);\n        formData.append('mask', maskFile);\n        formData.append('prompt', fullPrompt);\n        formData.append('n', 1);\n        formData.append('size', '1024x1024');\n        formData.append('response_format', 'url');\n\n        // Make a direct fetch request to the OpenAI API endpoint\n        const response = await fetch('https://api.openai.com/v1/images/edits', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: formData\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(`API Error: ${response.status} - ${JSON.stringify(errorData)}`);\n        }\n        const responseData = await response.json();\n\n        // Get the refined image URL\n        const refinedImageUrl = response.data[0].url;\n\n        // Pass the refined image URL to the parent component\n        onRefinementComplete(refinedImageUrl);\n        setMessage('Logo successfully refined!');\n        setMessageType('success');\n      } catch (apiError) {\n        console.error('OpenAI API Error:', apiError);\n        let errorMessage = apiError.message || 'Failed to refine logo';\n\n        // Check for specific API errors\n        if (apiError.response) {\n          errorMessage = `API Error: ${apiError.response.status} - ${JSON.stringify(apiError.response.data)}`;\n        }\n        setMessage(`Error: ${errorMessage}`);\n        setMessageType('error');\n        throw apiError;\n      }\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RefinerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Logo Refinement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Use OpenAI to enhance and refine your logo design.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: \"apiKey\",\n      children: \"OpenAI API Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiKeyInput, {\n      id: \"apiKey\",\n      type: \"password\",\n      placeholder: \"Enter your OpenAI API key\",\n      value: apiKey,\n      onChange: e => setApiKey(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: \"userPrompt\",\n      children: \"Refinement Instructions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PromptTextarea, {\n      id: \"userPrompt\",\n      placeholder: \"Describe how you want the AI to refine your logo...\",\n      value: userPrompt,\n      onChange: e => setUserPrompt(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: refineWithAI,\n      disabled: isRefining,\n      children: isRefining ? 'Refining...' : 'Refine with AI'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(StatusMessage, {\n      type: messageType,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n}\n_s(AIRefiner, \"HUYvNME8fH9yCvN82JBWUcW5xN4=\");\n_c7 = AIRefiner;\nexport default AIRefiner;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"RefinerContainer\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"StatusMessage\");\n$RefreshReg$(_c4, \"ApiKeyInput\");\n$RefreshReg$(_c5, \"PromptTextarea\");\n$RefreshReg$(_c6, \"Label\");\n$RefreshReg$(_c7, \"AIRefiner\");","map":{"version":3,"names":["React","useState","styled","OpenAI","jsxDEV","_jsxDEV","RefinerContainer","div","_c","Button","button","_c2","StatusMessage","props","type","message","_c3","ApiKeyInput","input","_c4","PromptTextarea","textarea","_c5","Label","label","_c6","AIRefiner","logoRef","onRefinementComplete","_s","apiKey","setApiKey","userPrompt","setUserPrompt","isRefining","setIsRefining","setMessage","messageType","setMessageType","refineWithAI","logoElement","current","Error","htmlToImage","dataUrl","toPng","fetchResponse","fetch","blob","imageFile","File","width","clientWidth","height","clientHeight","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","maskBlob","Promise","resolve","toBlob","maskFile","openai","dangerouslyAllowBrowser","systemPrompt","fullPrompt","console","log","imageSize","promptLength","length","formData","FormData","append","response","method","headers","body","ok","errorData","json","status","JSON","stringify","responseData","refinedImageUrl","data","url","apiError","error","errorMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","placeholder","value","onChange","e","target","onClick","disabled","_c7","$RefreshReg$"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\n\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n\nconst PromptTextarea = styled.textarea`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  min-height: 100px;\n  resize: vertical;\n  font-family: Arial, sans-serif;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n`;\n\nfunction AIRefiner({ logoRef, onRefinementComplete }) {\n  const [apiKey, setApiKey] = useState('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');\n  const [userPrompt, setUserPrompt] = useState('Enhance this logo by making it more professional and polished. Maintain the original style and colors but improve the overall quality and visual appeal.');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Use html-to-image to capture the logo element\n      const logoElement = logoRef.current;\n      if (!logoElement) {\n        throw new Error('Logo element not found');\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n      \n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n      \n      // Convert data URL to Blob for OpenAI API\n      const fetchResponse = await fetch(dataUrl);\n      const blob = await fetchResponse.blob();\n      \n      // Create a File object from the Blob\n      const imageFile = new File([blob], 'logo.png', { type: 'image/png' });\n      \n      // Get the dimensions of the logo element\n      const width = logoElement.clientWidth;\n      const height = logoElement.clientHeight;\n      \n      // Create a transparent mask image with the same dimensions\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      \n      // Fill with transparent pixels (alpha = 0)\n      ctx.fillStyle = 'rgba(0, 0, 0, 0)';\n      ctx.fillRect(0, 0, width, height);\n      \n      // Add a small non-transparent area in the corner to ensure the mask is valid\n      // This is a workaround as some APIs require non-empty masks\n      ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n      ctx.fillRect(width - 10, height - 10, 10, 10);\n      \n      // Convert canvas to blob\n      const maskBlob = await new Promise(resolve => {\n        canvas.toBlob(resolve, 'image/png');\n      });\n      \n      // Create a File object for the mask\n      const maskFile = new File([maskBlob], 'mask.png', { type: 'image/png' });\n      \n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // System prompt to guide the AI behavior\n      const systemPrompt = \"You are an expert logo designer. Edit the provided image according to the user's instructions while preserving the original style and dimensions. Focus on enhancing the existing design rather than creating something completely new.\";\n      \n      // Combine system prompt with user prompt\n      const fullPrompt = `${systemPrompt}\\n\\nUser request: ${userPrompt}`;\n      \n      console.log('Sending request to OpenAI image edit API with:', {\n        imageSize: `${width}x${height}`,\n        promptLength: fullPrompt.length\n      });\n      \n      // Call OpenAI API to edit the logo image using the direct endpoint\n      try {\n        // Create FormData for the API request\n        const formData = new FormData();\n        formData.append('image', imageFile);\n        formData.append('mask', maskFile);\n        formData.append('prompt', fullPrompt);\n        formData.append('n', 1);\n        formData.append('size', '1024x1024');\n        formData.append('response_format', 'url');\n        \n        // Make a direct fetch request to the OpenAI API endpoint\n        const response = await fetch('https://api.openai.com/v1/images/edits', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${apiKey}`\n          },\n          body: formData\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(`API Error: ${response.status} - ${JSON.stringify(errorData)}`);\n        }\n        \n        const responseData = await response.json();\n        \n        // Get the refined image URL\n        const refinedImageUrl = response.data[0].url;\n        \n        // Pass the refined image URL to the parent component\n        onRefinementComplete(refinedImageUrl);\n        \n        setMessage('Logo successfully refined!');\n        setMessageType('success');\n      } catch (apiError) {\n        console.error('OpenAI API Error:', apiError);\n        let errorMessage = apiError.message || 'Failed to refine logo';\n        \n        // Check for specific API errors\n        if (apiError.response) {\n          errorMessage = `API Error: ${apiError.response.status} - ${JSON.stringify(apiError.response.data)}`;\n        }\n        \n        setMessage(`Error: ${errorMessage}`);\n        setMessageType('error');\n        throw apiError;\n      }\n\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n\n  return (\n    <RefinerContainer>\n      <h2>AI Logo Refinement</h2>\n      <p>Use OpenAI to enhance and refine your logo design.</p>\n      \n      <Label htmlFor=\"apiKey\">OpenAI API Key</Label>\n      <ApiKeyInput\n        id=\"apiKey\"\n        type=\"password\"\n        placeholder=\"Enter your OpenAI API key\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n      \n      <Label htmlFor=\"userPrompt\">Refinement Instructions</Label>\n      <PromptTextarea\n        id=\"userPrompt\"\n        placeholder=\"Describe how you want the AI to refine your logo...\"\n        value={userPrompt}\n        onChange={(e) => setUserPrompt(e.target.value)}\n      />\n      \n      <Button \n        onClick={refineWithAI} \n        disabled={isRefining}\n      >\n        {isRefining ? 'Refining...' : 'Refine with AI'}\n      </Button>\n      \n      {message && (\n        <StatusMessage type={messageType}>\n          {message}\n        </StatusMessage>\n      )}\n    </RefinerContainer>\n  );\n}\n\nexport default AIRefiner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}