{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { isRequestOptions } from \"../../../core.mjs\";\nimport { ChatCompletionStoreMessagesPage } from \"./completions.mjs\";\nexport class Messages extends APIResource {\n  list(completionId, query = {}, options) {\n    if (isRequestOptions(query)) {\n      return this.list(completionId, {}, query);\n    }\n    return this._client.getAPIList(`/chat/completions/${completionId}/messages`, ChatCompletionStoreMessagesPage, {\n      query,\n      ...options\n    });\n  }\n}\nexport { ChatCompletionStoreMessagesPage };","map":{"version":3,"names":["APIResource","isRequestOptions","ChatCompletionStoreMessagesPage","Messages","list","completionId","query","options","_client","getAPIList"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/node_modules/openai/src/resources/chat/completions/messages.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as CompletionsAPI from './completions';\nimport { ChatCompletionStoreMessagesPage } from './completions';\nimport { type CursorPageParams } from '../../../pagination';\n\nexport class Messages extends APIResource {\n  /**\n   * Get the messages in a stored chat completion. Only Chat Completions that have\n   * been created with the `store` parameter set to `true` will be returned.\n   *\n   * @example\n   * ```ts\n   * // Automatically fetches more pages as needed.\n   * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\n   *   'completion_id',\n   * )) {\n   *   // ...\n   * }\n   * ```\n   */\n  list(\n    completionId: string,\n    query?: MessageListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage>;\n  list(\n    completionId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage>;\n  list(\n    completionId: string,\n    query: MessageListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage> {\n    if (isRequestOptions(query)) {\n      return this.list(completionId, {}, query);\n    }\n    return this._client.getAPIList(\n      `/chat/completions/${completionId}/messages`,\n      ChatCompletionStoreMessagesPage,\n      { query, ...options },\n    );\n  }\n}\n\nexport interface MessageListParams extends CursorPageParams {\n  /**\n   * Sort order for messages by timestamp. Use `asc` for ascending order or `desc`\n   * for descending order. Defaults to `asc`.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport declare namespace Messages {\n  export { type MessageListParams as MessageListParams };\n}\n\nexport { ChatCompletionStoreMessagesPage };\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SACbC,gBAAgB,QAAE;SAGlBC,+BAA+B,QAAE;AAG1C,OAAM,MAAOC,QAAS,SAAQH,WAAW;EAwBvCI,IAAIA,CACFC,YAAoB,EACpBC,KAAA,GAAiD,EAAE,EACnDC,OAA6B;IAE7B,IAAIN,gBAAgB,CAACK,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACF,IAAI,CAACC,YAAY,EAAE,EAAE,EAAEC,KAAK,CAAC;;IAE3C,OAAO,IAAI,CAACE,OAAO,CAACC,UAAU,CAC5B,qBAAqBJ,YAAY,WAAW,EAC5CH,+BAA+B,EAC/B;MAAEI,KAAK;MAAE,GAAGC;IAAO,CAAE,CACtB;EACH;;AAeF,SAASL,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}