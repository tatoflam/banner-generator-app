{"ast":null,"code":"import { uuid, getStyleProperties } from './util';\nfunction formatCSSText(style) {\n  const content = style.getPropertyValue('content');\n  return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`;\n}\nfunction formatCSSProperties(style, options) {\n  return getStyleProperties(options).map(name => {\n    const value = style.getPropertyValue(name);\n    const priority = style.getPropertyPriority(name);\n    return `${name}: ${value}${priority ? ' !important' : ''};`;\n  }).join(' ');\n}\nfunction getPseudoElementStyle(className, pseudo, style, options) {\n  const selector = `.${className}:${pseudo}`;\n  const cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style, options);\n  return document.createTextNode(`${selector}{${cssText}}`);\n}\nfunction clonePseudoElement(nativeNode, clonedNode, pseudo, options) {\n  const style = window.getComputedStyle(nativeNode, pseudo);\n  const content = style.getPropertyValue('content');\n  if (content === '' || content === 'none') {\n    return;\n  }\n  const className = uuid();\n  try {\n    clonedNode.className = `${clonedNode.className} ${className}`;\n  } catch (err) {\n    return;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.appendChild(getPseudoElementStyle(className, pseudo, style, options));\n  clonedNode.appendChild(styleElement);\n}\nexport function clonePseudoElements(nativeNode, clonedNode, options) {\n  clonePseudoElement(nativeNode, clonedNode, ':before', options);\n  clonePseudoElement(nativeNode, clonedNode, ':after', options);\n}","map":{"version":3,"names":["uuid","getStyleProperties","formatCSSText","style","content","getPropertyValue","cssText","replace","formatCSSProperties","options","map","name","value","priority","getPropertyPriority","join","getPseudoElementStyle","className","pseudo","selector","document","createTextNode","clonePseudoElement","nativeNode","clonedNode","window","getComputedStyle","err","styleElement","createElement","appendChild","clonePseudoElements"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/node_modules/html-to-image/src/clone-pseudos.ts"],"sourcesContent":["import type { Options } from './types'\nimport { uuid, getStyleProperties } from './util'\n\ntype Pseudo = ':before' | ':after'\n\nfunction formatCSSText(style: CSSStyleDeclaration) {\n  const content = style.getPropertyValue('content')\n  return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`\n}\n\nfunction formatCSSProperties(style: CSSStyleDeclaration, options: Options) {\n  return getStyleProperties(options)\n    .map((name) => {\n      const value = style.getPropertyValue(name)\n      const priority = style.getPropertyPriority(name)\n\n      return `${name}: ${value}${priority ? ' !important' : ''};`\n    })\n    .join(' ')\n}\n\nfunction getPseudoElementStyle(\n  className: string,\n  pseudo: Pseudo,\n  style: CSSStyleDeclaration,\n  options: Options,\n): Text {\n  const selector = `.${className}:${pseudo}`\n  const cssText = style.cssText\n    ? formatCSSText(style)\n    : formatCSSProperties(style, options)\n\n  return document.createTextNode(`${selector}{${cssText}}`)\n}\n\nfunction clonePseudoElement<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  pseudo: Pseudo,\n  options: Options,\n) {\n  const style = window.getComputedStyle(nativeNode, pseudo)\n  const content = style.getPropertyValue('content')\n  if (content === '' || content === 'none') {\n    return\n  }\n\n  const className = uuid()\n  try {\n    clonedNode.className = `${clonedNode.className} ${className}`\n  } catch (err) {\n    return\n  }\n\n  const styleElement = document.createElement('style')\n  styleElement.appendChild(\n    getPseudoElementStyle(className, pseudo, style, options),\n  )\n  clonedNode.appendChild(styleElement)\n}\n\nexport function clonePseudoElements<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n) {\n  clonePseudoElement(nativeNode, clonedNode, ':before', options)\n  clonePseudoElement(nativeNode, clonedNode, ':after', options)\n}\n"],"mappings":"AACA,SAASA,IAAI,EAAEC,kBAAkB,QAAQ,QAAQ;AAIjD,SAASC,aAAaA,CAACC,KAA0B;EAC/C,MAAMC,OAAO,GAAGD,KAAK,CAACE,gBAAgB,CAAC,SAAS,CAAC;EACjD,OAAO,GAAGF,KAAK,CAACG,OAAO,cAAcF,OAAO,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI;AACtE;AAEA,SAASC,mBAAmBA,CAACL,KAA0B,EAAEM,OAAgB;EACvE,OAAOR,kBAAkB,CAACQ,OAAO,CAAC,CAC/BC,GAAG,CAAEC,IAAI,IAAI;IACZ,MAAMC,KAAK,GAAGT,KAAK,CAACE,gBAAgB,CAACM,IAAI,CAAC;IAC1C,MAAME,QAAQ,GAAGV,KAAK,CAACW,mBAAmB,CAACH,IAAI,CAAC;IAEhD,OAAO,GAAGA,IAAI,KAAKC,KAAK,GAAGC,QAAQ,GAAG,aAAa,GAAG,EAAE,GAAG;EAC7D,CAAC,CAAC,CACDE,IAAI,CAAC,GAAG,CAAC;AACd;AAEA,SAASC,qBAAqBA,CAC5BC,SAAiB,EACjBC,MAAc,EACdf,KAA0B,EAC1BM,OAAgB;EAEhB,MAAMU,QAAQ,GAAG,IAAIF,SAAS,IAAIC,MAAM,EAAE;EAC1C,MAAMZ,OAAO,GAAGH,KAAK,CAACG,OAAO,GACzBJ,aAAa,CAACC,KAAK,CAAC,GACpBK,mBAAmB,CAACL,KAAK,EAAEM,OAAO,CAAC;EAEvC,OAAOW,QAAQ,CAACC,cAAc,CAAC,GAAGF,QAAQ,IAAIb,OAAO,GAAG,CAAC;AAC3D;AAEA,SAASgB,kBAAkBA,CACzBC,UAAa,EACbC,UAAa,EACbN,MAAc,EACdT,OAAgB;EAEhB,MAAMN,KAAK,GAAGsB,MAAM,CAACC,gBAAgB,CAACH,UAAU,EAAEL,MAAM,CAAC;EACzD,MAAMd,OAAO,GAAGD,KAAK,CAACE,gBAAgB,CAAC,SAAS,CAAC;EACjD,IAAID,OAAO,KAAK,EAAE,IAAIA,OAAO,KAAK,MAAM,EAAE;IACxC;;EAGF,MAAMa,SAAS,GAAGjB,IAAI,EAAE;EACxB,IAAI;IACFwB,UAAU,CAACP,SAAS,GAAG,GAAGO,UAAU,CAACP,SAAS,IAAIA,SAAS,EAAE;GAC9D,CAAC,OAAOU,GAAG,EAAE;IACZ;;EAGF,MAAMC,YAAY,GAAGR,QAAQ,CAACS,aAAa,CAAC,OAAO,CAAC;EACpDD,YAAY,CAACE,WAAW,CACtBd,qBAAqB,CAACC,SAAS,EAAEC,MAAM,EAAEf,KAAK,EAAEM,OAAO,CAAC,CACzD;EACDe,UAAU,CAACM,WAAW,CAACF,YAAY,CAAC;AACtC;AAEA,OAAM,SAAUG,mBAAmBA,CACjCR,UAAa,EACbC,UAAa,EACbf,OAAgB;EAEhBa,kBAAkB,CAACC,UAAU,EAAEC,UAAU,EAAE,SAAS,EAAEf,OAAO,CAAC;EAC9Da,kBAAkB,CAACC,UAAU,EAAEC,UAAU,EAAE,QAAQ,EAAEf,OAAO,CAAC;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}