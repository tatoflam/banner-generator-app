{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport {};","map":{"version":3,"names":[],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/node_modules/openai/src/resources/shared.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nexport type AllModels =\n  | (string & {})\n  | ChatModel\n  | 'o1-pro'\n  | 'o1-pro-2025-03-19'\n  | 'computer-use-preview'\n  | 'computer-use-preview-2025-03-11';\n\nexport type ChatModel =\n  | 'gpt-4.1'\n  | 'gpt-4.1-mini'\n  | 'gpt-4.1-nano'\n  | 'gpt-4.1-2025-04-14'\n  | 'gpt-4.1-mini-2025-04-14'\n  | 'gpt-4.1-nano-2025-04-14'\n  | 'o4-mini'\n  | 'o4-mini-2025-04-16'\n  | 'o3'\n  | 'o3-2025-04-16'\n  | 'o3-mini'\n  | 'o3-mini-2025-01-31'\n  | 'o1'\n  | 'o1-2024-12-17'\n  | 'o1-preview'\n  | 'o1-preview-2024-09-12'\n  | 'o1-mini'\n  | 'o1-mini-2024-09-12'\n  | 'gpt-4o'\n  | 'gpt-4o-2024-11-20'\n  | 'gpt-4o-2024-08-06'\n  | 'gpt-4o-2024-05-13'\n  | 'gpt-4o-audio-preview'\n  | 'gpt-4o-audio-preview-2024-10-01'\n  | 'gpt-4o-audio-preview-2024-12-17'\n  | 'gpt-4o-mini-audio-preview'\n  | 'gpt-4o-mini-audio-preview-2024-12-17'\n  | 'gpt-4o-search-preview'\n  | 'gpt-4o-mini-search-preview'\n  | 'gpt-4o-search-preview-2025-03-11'\n  | 'gpt-4o-mini-search-preview-2025-03-11'\n  | 'chatgpt-4o-latest'\n  | 'codex-mini-latest'\n  | 'gpt-4o-mini'\n  | 'gpt-4o-mini-2024-07-18'\n  | 'gpt-4-turbo'\n  | 'gpt-4-turbo-2024-04-09'\n  | 'gpt-4-0125-preview'\n  | 'gpt-4-turbo-preview'\n  | 'gpt-4-1106-preview'\n  | 'gpt-4-vision-preview'\n  | 'gpt-4'\n  | 'gpt-4-0314'\n  | 'gpt-4-0613'\n  | 'gpt-4-32k'\n  | 'gpt-4-32k-0314'\n  | 'gpt-4-32k-0613'\n  | 'gpt-3.5-turbo'\n  | 'gpt-3.5-turbo-16k'\n  | 'gpt-3.5-turbo-0301'\n  | 'gpt-3.5-turbo-0613'\n  | 'gpt-3.5-turbo-1106'\n  | 'gpt-3.5-turbo-0125'\n  | 'gpt-3.5-turbo-16k-0613';\n\n/**\n * A filter used to compare a specified attribute key to a given value using a\n * defined comparison operation.\n */\nexport interface ComparisonFilter {\n  /**\n   * The key to compare against the value.\n   */\n  key: string;\n\n  /**\n   * Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n   *\n   * - `eq`: equals\n   * - `ne`: not equal\n   * - `gt`: greater than\n   * - `gte`: greater than or equal\n   * - `lt`: less than\n   * - `lte`: less than or equal\n   */\n  type: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte';\n\n  /**\n   * The value to compare against the attribute key; supports string, number, or\n   * boolean types.\n   */\n  value: string | number | boolean;\n}\n\n/**\n * Combine multiple filters using `and` or `or`.\n */\nexport interface CompoundFilter {\n  /**\n   * Array of filters to combine. Items can be `ComparisonFilter` or\n   * `CompoundFilter`.\n   */\n  filters: Array<ComparisonFilter | unknown>;\n\n  /**\n   * Type of operation: `and` or `or`.\n   */\n  type: 'and' | 'or';\n}\n\nexport interface ErrorObject {\n  code: string | null;\n\n  message: string;\n\n  param: string | null;\n\n  type: string;\n}\n\nexport interface FunctionDefinition {\n  /**\n   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\n   * underscores and dashes, with a maximum length of 64.\n   */\n  name: string;\n\n  /**\n   * A description of what the function does, used by the model to choose when and\n   * how to call the function.\n   */\n  description?: string;\n\n  /**\n   * The parameters the functions accepts, described as a JSON Schema object. See the\n   * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,\n   * and the\n   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n   * documentation about the format.\n   *\n   * Omitting `parameters` defines a function with an empty parameter list.\n   */\n  parameters?: FunctionParameters;\n\n  /**\n   * Whether to enable strict schema adherence when generating the function call. If\n   * set to true, the model will follow the exact schema defined in the `parameters`\n   * field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn\n   * more about Structured Outputs in the\n   * [function calling guide](docs/guides/function-calling).\n   */\n  strict?: boolean | null;\n}\n\n/**\n * The parameters the functions accepts, described as a JSON Schema object. See the\n * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,\n * and the\n * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\n * documentation about the format.\n *\n * Omitting `parameters` defines a function with an empty parameter list.\n */\nexport type FunctionParameters = Record<string, unknown>;\n\n/**\n * Set of 16 key-value pairs that can be attached to an object. This can be useful\n * for storing additional information about the object in a structured format, and\n * querying for objects via API or the dashboard.\n *\n * Keys are strings with a maximum length of 64 characters. Values are strings with\n * a maximum length of 512 characters.\n */\nexport type Metadata = Record<string, string>;\n\n/**\n * **o-series models only**\n *\n * Configuration options for\n * [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n */\nexport interface Reasoning {\n  /**\n   * **o-series models only**\n   *\n   * Constrains effort on reasoning for\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n   * result in faster responses and fewer tokens used on reasoning in a response.\n   */\n  effort?: ReasoningEffort | null;\n\n  /**\n   * @deprecated **Deprecated:** use `summary` instead.\n   *\n   * A summary of the reasoning performed by the model. This can be useful for\n   * debugging and understanding the model's reasoning process. One of `auto`,\n   * `concise`, or `detailed`.\n   */\n  generate_summary?: 'auto' | 'concise' | 'detailed' | null;\n\n  /**\n   * A summary of the reasoning performed by the model. This can be useful for\n   * debugging and understanding the model's reasoning process. One of `auto`,\n   * `concise`, or `detailed`.\n   */\n  summary?: 'auto' | 'concise' | 'detailed' | null;\n}\n\n/**\n * **o-series models only**\n *\n * Constrains effort on reasoning for\n * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n * result in faster responses and fewer tokens used on reasoning in a response.\n */\nexport type ReasoningEffort = 'low' | 'medium' | 'high' | null;\n\n/**\n * JSON object response format. An older method of generating JSON responses. Using\n * `json_schema` is recommended for models that support it. Note that the model\n * will not generate JSON without a system or user message instructing it to do so.\n */\nexport interface ResponseFormatJSONObject {\n  /**\n   * The type of response format being defined. Always `json_object`.\n   */\n  type: 'json_object';\n}\n\n/**\n * JSON Schema response format. Used to generate structured JSON responses. Learn\n * more about\n * [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\n */\nexport interface ResponseFormatJSONSchema {\n  /**\n   * Structured Outputs configuration options, including a JSON Schema.\n   */\n  json_schema: ResponseFormatJSONSchema.JSONSchema;\n\n  /**\n   * The type of response format being defined. Always `json_schema`.\n   */\n  type: 'json_schema';\n}\n\nexport namespace ResponseFormatJSONSchema {\n  /**\n   * Structured Outputs configuration options, including a JSON Schema.\n   */\n  export interface JSONSchema {\n    /**\n     * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores\n     * and dashes, with a maximum length of 64.\n     */\n    name: string;\n\n    /**\n     * A description of what the response format is for, used by the model to determine\n     * how to respond in the format.\n     */\n    description?: string;\n\n    /**\n     * The schema for the response format, described as a JSON Schema object. Learn how\n     * to build JSON schemas [here](https://json-schema.org/).\n     */\n    schema?: Record<string, unknown>;\n\n    /**\n     * Whether to enable strict schema adherence when generating the output. If set to\n     * true, the model will always follow the exact schema defined in the `schema`\n     * field. Only a subset of JSON Schema is supported when `strict` is `true`. To\n     * learn more, read the\n     * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n     */\n    strict?: boolean | null;\n  }\n}\n\n/**\n * Default response format. Used to generate text responses.\n */\nexport interface ResponseFormatText {\n  /**\n   * The type of response format being defined. Always `text`.\n   */\n  type: 'text';\n}\n\nexport type ResponsesModel =\n  | (string & {})\n  | ChatModel\n  | 'o1-pro'\n  | 'o1-pro-2025-03-19'\n  | 'computer-use-preview'\n  | 'computer-use-preview-2025-03-11';\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}