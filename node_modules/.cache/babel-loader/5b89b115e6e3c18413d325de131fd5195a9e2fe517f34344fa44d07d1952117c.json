{"ast":null,"code":"var _jsxFileName = \"/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n_c = RefinerContainer;\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n_c2 = Button;\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n_c3 = StatusMessage;\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n_c4 = ApiKeyInput;\nfunction AIRefiner({\n  logoRef,\n  onRefinementComplete\n}) {\n  _s();\n  const [apiKey, setApiKey] = useState('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');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Use html-to-image to capture the logo element\n      const logoElement = logoRef.current;\n      if (!logoElement) {\n        throw new Error('Logo element not found');\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n\n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n\n      // Convert data URL to base64 for OpenAI API\n      const imageData = dataUrl.split(',')[1];\n\n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // Call OpenAI API to refine the image\n      const response = await openai.images.edit({\n        image: imageData,\n        prompt: \"Enhance this logo to make it more professional and polished, maintaining its original style and colors\",\n        n: 1,\n        size: \"1024x1024\",\n        response_format: \"url\"\n      });\n\n      // Get the refined image URL\n      const refinedImageUrl = response.data[0].url;\n\n      // Pass the refined image URL to the parent component\n      onRefinementComplete(refinedImageUrl);\n      setMessage('Logo successfully refined!');\n      setMessageType('success');\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RefinerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Logo Refinement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Use OpenAI to enhance and refine your logo design.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiKeyInput, {\n      type: \"password\",\n      placeholder: \"Enter your OpenAI API key\",\n      value: apiKey,\n      onChange: e => setApiKey(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: refineWithAI,\n      disabled: isRefining,\n      children: isRefining ? 'Refining...' : 'Refine with AI'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(StatusMessage, {\n      type: messageType,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(AIRefiner, \"xzwSXI2Rccmh5HRqdNwrTEdTqiM=\");\n_c5 = AIRefiner;\nexport default AIRefiner;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"RefinerContainer\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"StatusMessage\");\n$RefreshReg$(_c4, \"ApiKeyInput\");\n$RefreshReg$(_c5, \"AIRefiner\");","map":{"version":3,"names":["React","useState","styled","OpenAI","jsxDEV","_jsxDEV","RefinerContainer","div","_c","Button","button","_c2","StatusMessage","props","type","message","_c3","ApiKeyInput","input","_c4","AIRefiner","logoRef","onRefinementComplete","_s","apiKey","setApiKey","isRefining","setIsRefining","setMessage","messageType","setMessageType","refineWithAI","logoElement","current","Error","htmlToImage","dataUrl","toPng","imageData","split","openai","dangerouslyAllowBrowser","response","images","edit","image","prompt","n","size","response_format","refinedImageUrl","data","url","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","onClick","disabled","_c5","$RefreshReg$"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\n\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n\nfunction AIRefiner({ logoRef, onRefinementComplete }) {\n  const [apiKey, setApiKey] = useState('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');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Use html-to-image to capture the logo element\n      const logoElement = logoRef.current;\n      if (!logoElement) {\n        throw new Error('Logo element not found');\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n      \n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n      \n      // Convert data URL to base64 for OpenAI API\n      const imageData = dataUrl.split(',')[1];\n\n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // Call OpenAI API to refine the image\n      const response = await openai.images.edit({\n        image: imageData,\n        prompt: \"Enhance this logo to make it more professional and polished, maintaining its original style and colors\",\n        n: 1,\n        size: \"1024x1024\",\n        response_format: \"url\",\n      });\n\n      // Get the refined image URL\n      const refinedImageUrl = response.data[0].url;\n      \n      // Pass the refined image URL to the parent component\n      onRefinementComplete(refinedImageUrl);\n      \n      setMessage('Logo successfully refined!');\n      setMessageType('success');\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n\n  return (\n    <RefinerContainer>\n      <h2>AI Logo Refinement</h2>\n      <p>Use OpenAI to enhance and refine your logo design.</p>\n      \n      <ApiKeyInput\n        type=\"password\"\n        placeholder=\"Enter your OpenAI API key\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n      \n      <Button \n        onClick={refineWithAI} \n        disabled={isRefining}\n      >\n        {isRefining ? 'Refining...' : 'Refine with AI'}\n      </Button>\n      \n      {message && (\n        <StatusMessage type={messageType}>\n          {message}\n        </StatusMessage>\n      )}\n    </RefinerContainer>\n  );\n}\n\nexport default AIRefiner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}