{"ast":null,"code":"var _jsxFileName = \"/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n_c = RefinerContainer;\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n_c2 = Button;\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n_c3 = StatusMessage;\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n_c4 = ApiKeyInput;\nconst PromptTextarea = styled.textarea`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  min-height: 100px;\n  resize: vertical;\n  font-family: Arial, sans-serif;\n`;\n_c5 = PromptTextarea;\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n`;\n_c6 = Label;\nfunction AIRefiner({\n  logoRef,\n  onRefinementComplete\n}) {\n  _s();\n  const [apiKey, setApiKey] = useState('');\n  const [userPrompt, setUserPrompt] = useState('Enhance this image by making it more professional and polished. Maintain the original style and colors but improve the overall quality and visual appeal. Keep the text and its effect.');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Get the logo element - either from the ref or from the preview container\n      let logoElement = logoRef.current;\n\n      // If logoRef is not available (which happens when a refined image is already displayed),\n      // we need to get the preview container instead\n      if (!logoElement) {\n        // Find the preview container by its class or structure\n        const previewContainer = document.querySelector('.preview-area');\n        if (previewContainer) {\n          logoElement = previewContainer;\n        } else {\n          throw new Error('Logo element not found');\n        }\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n\n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n\n      // Get the dimensions of the logo element\n      const width = logoElement.clientWidth;\n      const height = logoElement.clientHeight;\n\n      // Analyze the logo to extract key characteristics\n      // This will help us generate a similar logo with the same style\n      const logoText = logoElement.innerText || 'Your Logo';\n      const computedStyle = window.getComputedStyle(logoElement);\n      const fontFamily = computedStyle.fontFamily || 'Arial';\n      const fontSize = computedStyle.fontSize || '48px';\n      const fontColor = computedStyle.color || 'black';\n      const backgroundColor = computedStyle.backgroundColor || 'transparent';\n\n      // Create a detailed description of the current logo for the AI\n      const logoDescription = `\n        The current logo has text \"${logoText}\" with font family \"${fontFamily}\" \n        at size \"${fontSize}\" and color \"${fontColor}\" on a \"${backgroundColor}\" background.\n        The logo dimensions are ${width}x${height} pixels.\n        Please create an enhanced version of this image that maintains the same text and overall style,\n        but with improved visual quality, better typography, and more attractive appearance.\n      `;\n\n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // System prompt to guide the AI behavior\n      const systemPrompt = \"You are an expert illust designer. Edit the provided image according to the user's instructions while preserving the original style and dimensions. Focus on enhancing the existing design rather than creating something completely new except the text and its effect.\";\n\n      // Combine system prompt with user prompt\n      const fullPrompt = `${systemPrompt}\\n\\nUser request: ${userPrompt}`;\n\n      // Determine the appropriate size for the API\n      // OpenAI API requires specific sizes\n      let apiSize;\n      if (Math.max(width, height) <= 512) {\n        apiSize = \"512x512\";\n      } else {\n        apiSize = \"1024x1024\";\n      }\n      console.log('Sending request to OpenAI with:', {\n        logoDescription,\n        apiSize,\n        promptLength: fullPrompt.length\n      });\n\n      // Call OpenAI API to generate a new logo based on the description and user prompt\n      try {\n        // Combine the system prompt, user prompt, and logo description\n        const enhancedPrompt = `${fullPrompt}\\n\\nLogo details: ${logoDescription}`;\n\n        // Function to make API request with retry logic\n        const makeRequestWithRetry = async (retries = 3, delay = 2000) => {\n          // Add a timeout promise to handle potential hanging requests\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Request timed out')), 30000); // 30 second timeout\n          });\n          for (let attempt = 0; attempt < retries; attempt++) {\n            try {\n              // Use the OpenAI SDK to generate a new image with timeout\n              const generateImagePromise = openai.images.generate({\n                prompt: enhancedPrompt,\n                n: 1,\n                size: apiSize,\n                response_format: \"url\"\n              });\n\n              // Race the API call against the timeout\n              return await Promise.race([generateImagePromise, timeoutPromise]);\n            } catch (error) {\n              // If this is the last attempt, throw the error\n              if (attempt === retries - 1) {\n                throw error;\n              }\n\n              // If the error is due to insufficient resources, wait and retry\n              if (error.message && error.message.includes('ERR_INSUFFICIENT_RESOURCES')) {\n                const retryMessage = `Attempt ${attempt + 1} failed with insufficient resources. Retrying in ${delay / 1000} seconds...`;\n                console.log(retryMessage);\n                // Update the status message to inform the user about the retry\n                setMessage(`Retrying... ${retryMessage}`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                // Exponential backoff - double the delay for the next attempt\n                delay *= 2;\n              } else {\n                // For other errors, don't retry\n                throw error;\n              }\n            }\n          }\n        };\n\n        // Make the request with retry logic\n        const response = await makeRequestWithRetry();\n        console.log('OpenAI API response:', response);\n\n        // Get the refined image URL\n        const refinedImageUrl = response.data[0].url;\n\n        // Pass the refined image URL to the parent component\n        onRefinementComplete(refinedImageUrl);\n        setMessage('Logo successfully refined!');\n        setMessageType('success');\n      } catch (apiError) {\n        console.error('OpenAI API Error:', apiError);\n        let errorMessage = apiError.message || 'Failed to refine logo';\n\n        // Check for specific API errors\n        if (apiError.response) {\n          errorMessage = `API Error: ${apiError.response.status} - ${JSON.stringify(apiError.response.data)}`;\n        }\n\n        // Handle specific error types\n        if (apiError.message && apiError.message.includes('ERR_INSUFFICIENT_RESOURCES')) {\n          errorMessage = 'Insufficient resources error. This may be due to high server load or rate limiting. Please try again later.';\n        } else if (apiError.message && apiError.message.includes('timeout')) {\n          errorMessage = 'The request timed out. Please check your internet connection and try again.';\n        } else if (apiError.message && apiError.message.includes('network')) {\n          errorMessage = 'Network error. Please check your internet connection and try again.';\n        }\n        setMessage(`Error: ${errorMessage}`);\n        setMessageType('error');\n        console.error('Detailed error:', apiError);\n      }\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RefinerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Logo Refinement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Use OpenAI to enhance and refine your logo design.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: \"apiKey\",\n      children: \"OpenAI API Key\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ApiKeyInput, {\n      id: \"apiKey\",\n      type: \"password\",\n      placeholder: \"Enter your OpenAI API key\",\n      value: apiKey,\n      onChange: e => setApiKey(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      htmlFor: \"userPrompt\",\n      children: \"Refinement Instructions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PromptTextarea, {\n      id: \"userPrompt\",\n      placeholder: \"Describe how you want the AI to refine your logo...\",\n      value: userPrompt,\n      onChange: e => setUserPrompt(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: refineWithAI,\n      disabled: isRefining,\n      children: isRefining ? 'Refining...' : 'Refine with AI'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(StatusMessage, {\n      type: messageType,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n}\n_s(AIRefiner, \"XFWXoJxkmZckRimZaTSfRccF4TY=\");\n_c7 = AIRefiner;\nexport default AIRefiner;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"RefinerContainer\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"StatusMessage\");\n$RefreshReg$(_c4, \"ApiKeyInput\");\n$RefreshReg$(_c5, \"PromptTextarea\");\n$RefreshReg$(_c6, \"Label\");\n$RefreshReg$(_c7, \"AIRefiner\");","map":{"version":3,"names":["React","useState","styled","OpenAI","jsxDEV","_jsxDEV","RefinerContainer","div","_c","Button","button","_c2","StatusMessage","props","type","message","_c3","ApiKeyInput","input","_c4","PromptTextarea","textarea","_c5","Label","label","_c6","AIRefiner","logoRef","onRefinementComplete","_s","apiKey","setApiKey","userPrompt","setUserPrompt","isRefining","setIsRefining","setMessage","messageType","setMessageType","refineWithAI","logoElement","current","previewContainer","document","querySelector","Error","htmlToImage","dataUrl","toPng","width","clientWidth","height","clientHeight","logoText","innerText","computedStyle","window","getComputedStyle","fontFamily","fontSize","fontColor","color","backgroundColor","logoDescription","openai","dangerouslyAllowBrowser","systemPrompt","fullPrompt","apiSize","Math","max","console","log","promptLength","length","enhancedPrompt","makeRequestWithRetry","retries","delay","timeoutPromise","Promise","_","reject","setTimeout","attempt","generateImagePromise","images","generate","prompt","n","size","response_format","race","error","includes","retryMessage","resolve","response","refinedImageUrl","data","url","apiError","errorMessage","status","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","placeholder","value","onChange","e","target","onClick","disabled","_c7","$RefreshReg$"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/src/components/AIRefiner.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport OpenAI from 'openai';\n\nconst RefinerContainer = styled.div`\n  background-color: #f5f5f5;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-top: 2rem;\n`;\n\nconst Button = styled.button`\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 1rem;\n  margin-top: 1rem;\n  \n  &:hover {\n    background-color: #45a049;\n  }\n  \n  &:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n  }\n`;\n\nconst StatusMessage = styled.div`\n  margin-top: 1rem;\n  padding: 0.75rem;\n  border-radius: 4px;\n  background-color: ${props => props.type === 'error' ? '#ffebee' : '#e8f5e9'};\n  color: ${props => props.type === 'error' ? '#c62828' : '#2e7d32'};\n  display: ${props => props.message ? 'block' : 'none'};\n`;\n\nconst ApiKeyInput = styled.input`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n`;\n\nconst PromptTextarea = styled.textarea`\n  width: 100%;\n  padding: 0.5rem;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  min-height: 100px;\n  resize: vertical;\n  font-family: Arial, sans-serif;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n`;\n\nfunction AIRefiner({ logoRef, onRefinementComplete }) {\n  const [apiKey, setApiKey] = useState('');\n  const [userPrompt, setUserPrompt] = useState('Enhance this image by making it more professional and polished. Maintain the original style and colors but improve the overall quality and visual appeal. Keep the text and its effect.');\n  const [isRefining, setIsRefining] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('');\n\n  const refineWithAI = async () => {\n    if (!apiKey) {\n      setMessage('Please enter your OpenAI API key');\n      setMessageType('error');\n      return;\n    }\n\n    try {\n      setIsRefining(true);\n      setMessage('Refining your logo with AI...');\n      setMessageType('info');\n\n      // Get the logo element - either from the ref or from the preview container\n      let logoElement = logoRef.current;\n      \n      // If logoRef is not available (which happens when a refined image is already displayed),\n      // we need to get the preview container instead\n      if (!logoElement) {\n        // Find the preview container by its class or structure\n        const previewContainer = document.querySelector('.preview-area');\n        if (previewContainer) {\n          logoElement = previewContainer;\n        } else {\n          throw new Error('Logo element not found');\n        }\n      }\n\n      // Import html-to-image dynamically\n      const htmlToImage = await import('html-to-image');\n      \n      // Capture the logo as a data URL\n      const dataUrl = await htmlToImage.toPng(logoElement);\n      \n      // Get the dimensions of the logo element\n      const width = logoElement.clientWidth;\n      const height = logoElement.clientHeight;\n      \n      // Analyze the logo to extract key characteristics\n      // This will help us generate a similar logo with the same style\n      const logoText = logoElement.innerText || 'Your Logo';\n      const computedStyle = window.getComputedStyle(logoElement);\n      const fontFamily = computedStyle.fontFamily || 'Arial';\n      const fontSize = computedStyle.fontSize || '48px';\n      const fontColor = computedStyle.color || 'black';\n      const backgroundColor = computedStyle.backgroundColor || 'transparent';\n      \n      // Create a detailed description of the current logo for the AI\n      const logoDescription = `\n        The current logo has text \"${logoText}\" with font family \"${fontFamily}\" \n        at size \"${fontSize}\" and color \"${fontColor}\" on a \"${backgroundColor}\" background.\n        The logo dimensions are ${width}x${height} pixels.\n        Please create an enhanced version of this image that maintains the same text and overall style,\n        but with improved visual quality, better typography, and more attractive appearance.\n      `;\n      \n      // Initialize OpenAI client\n      const openai = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true // Note: In production, you should use a backend proxy\n      });\n\n      // System prompt to guide the AI behavior\n      const systemPrompt = \"You are an expert illust designer. Edit the provided image according to the user's instructions while preserving the original style and dimensions. Focus on enhancing the existing design rather than creating something completely new except the text and its effect.\";\n      \n      // Combine system prompt with user prompt\n      const fullPrompt = `${systemPrompt}\\n\\nUser request: ${userPrompt}`;\n      \n      // Determine the appropriate size for the API\n      // OpenAI API requires specific sizes\n      let apiSize;\n      if (Math.max(width, height) <= 512) {\n        apiSize = \"512x512\";\n      } else {\n        apiSize = \"1024x1024\";\n      }\n      \n      console.log('Sending request to OpenAI with:', {\n        logoDescription,\n        apiSize,\n        promptLength: fullPrompt.length\n      });\n      \n      // Call OpenAI API to generate a new logo based on the description and user prompt\n      try {\n        // Combine the system prompt, user prompt, and logo description\n        const enhancedPrompt = `${fullPrompt}\\n\\nLogo details: ${logoDescription}`;\n        \n        // Function to make API request with retry logic\n        const makeRequestWithRetry = async (retries = 3, delay = 2000) => {\n          // Add a timeout promise to handle potential hanging requests\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Request timed out')), 30000); // 30 second timeout\n          });\n          \n          for (let attempt = 0; attempt < retries; attempt++) {\n            try {\n              // Use the OpenAI SDK to generate a new image with timeout\n              const generateImagePromise = openai.images.generate({\n                prompt: enhancedPrompt,\n                n: 1,\n                size: apiSize,\n                response_format: \"url\",\n              });\n              \n              // Race the API call against the timeout\n              return await Promise.race([generateImagePromise, timeoutPromise]);\n            } catch (error) {\n              // If this is the last attempt, throw the error\n              if (attempt === retries - 1) {\n                throw error;\n              }\n              \n              // If the error is due to insufficient resources, wait and retry\n              if (error.message && error.message.includes('ERR_INSUFFICIENT_RESOURCES')) {\n                const retryMessage = `Attempt ${attempt + 1} failed with insufficient resources. Retrying in ${delay/1000} seconds...`;\n                console.log(retryMessage);\n                // Update the status message to inform the user about the retry\n                setMessage(`Retrying... ${retryMessage}`);\n                await new Promise(resolve => setTimeout(resolve, delay));\n                // Exponential backoff - double the delay for the next attempt\n                delay *= 2;\n              } else {\n                // For other errors, don't retry\n                throw error;\n              }\n            }\n          }\n        };\n        \n        // Make the request with retry logic\n        const response = await makeRequestWithRetry();\n        \n        console.log('OpenAI API response:', response);\n        \n        // Get the refined image URL\n        const refinedImageUrl = response.data[0].url;\n        \n        // Pass the refined image URL to the parent component\n        onRefinementComplete(refinedImageUrl);\n        \n        setMessage('Logo successfully refined!');\n        setMessageType('success');\n      } catch (apiError) {\n        console.error('OpenAI API Error:', apiError);\n        let errorMessage = apiError.message || 'Failed to refine logo';\n        \n        // Check for specific API errors\n        if (apiError.response) {\n          errorMessage = `API Error: ${apiError.response.status} - ${JSON.stringify(apiError.response.data)}`;\n        }\n        \n        // Handle specific error types\n        if (apiError.message && apiError.message.includes('ERR_INSUFFICIENT_RESOURCES')) {\n          errorMessage = 'Insufficient resources error. This may be due to high server load or rate limiting. Please try again later.';\n        } else if (apiError.message && apiError.message.includes('timeout')) {\n          errorMessage = 'The request timed out. Please check your internet connection and try again.';\n        } else if (apiError.message && apiError.message.includes('network')) {\n          errorMessage = 'Network error. Please check your internet connection and try again.';\n        }\n        \n        setMessage(`Error: ${errorMessage}`);\n        setMessageType('error');\n        console.error('Detailed error:', apiError);\n      }\n\n    } catch (error) {\n      console.error('Error refining logo:', error);\n      setMessage(`Error: ${error.message || 'Failed to refine logo'}`);\n      setMessageType('error');\n    } finally {\n      setIsRefining(false);\n    }\n  };\n\n  return (\n    <RefinerContainer>\n      <h2>AI Logo Refinement</h2>\n      <p>Use OpenAI to enhance and refine your logo design.</p>\n      \n      <Label htmlFor=\"apiKey\">OpenAI API Key</Label>\n      <ApiKeyInput\n        id=\"apiKey\"\n        type=\"password\"\n        placeholder=\"Enter your OpenAI API key\"\n        value={apiKey}\n        onChange={(e) => setApiKey(e.target.value)}\n      />\n      \n      <Label htmlFor=\"userPrompt\">Refinement Instructions</Label>\n      <PromptTextarea\n        id=\"userPrompt\"\n        placeholder=\"Describe how you want the AI to refine your logo...\"\n        value={userPrompt}\n        onChange={(e) => setUserPrompt(e.target.value)}\n      />\n      \n      <Button \n        onClick={refineWithAI} \n        disabled={isRefining}\n      >\n        {isRefining ? 'Refining...' : 'Refine with AI'}\n      </Button>\n      \n      {message && (\n        <StatusMessage type={messageType}>\n          {message}\n        </StatusMessage>\n      )}\n    </RefinerContainer>\n  );\n}\n\nexport default AIRefiner;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}