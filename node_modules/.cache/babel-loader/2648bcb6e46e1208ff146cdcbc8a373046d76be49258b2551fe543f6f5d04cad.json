{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LineDecoder_carriageReturnIndex;\nimport { OpenAIError } from \"../../error.mjs\";\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n  constructor() {\n    _LineDecoder_carriageReturnIndex.set(this, void 0);\n    this.buffer = new Uint8Array();\n    __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n  }\n  decode(chunk) {\n    if (chunk == null) {\n      return [];\n    }\n    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === 'string' ? new TextEncoder().encode(chunk) : chunk;\n    let newData = new Uint8Array(this.buffer.length + binaryChunk.length);\n    newData.set(this.buffer);\n    newData.set(binaryChunk, this.buffer.length);\n    this.buffer = newData;\n    const lines = [];\n    let patternIndex;\n    while ((patternIndex = findNewlineIndex(this.buffer, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n      if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n        // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n        continue;\n      }\n      // we got double \\r or \\rtext\\n\n      if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") != null && (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n        lines.push(this.decodeText(this.buffer.slice(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n        this.buffer = this.buffer.slice(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"));\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        continue;\n      }\n      const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n      const line = this.decodeText(this.buffer.slice(0, endIndex));\n      lines.push(line);\n      this.buffer = this.buffer.slice(patternIndex.index);\n      __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    return lines;\n  }\n  decodeText(bytes) {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n      throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n    }\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n        return this.textDecoder.decode(bytes);\n      }\n      throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n    }\n    throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n  }\n  flush() {\n    if (!this.buffer.length) {\n      return [];\n    }\n    return this.decode('\\n');\n  }\n}\n_LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = startIndex ?? 0; i < buffer.length; i++) {\n    if (buffer[i] === newline) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: false\n      };\n    }\n    if (buffer[i] === carriage) {\n      return {\n        preceding: i,\n        index: i + 1,\n        carriage: true\n      };\n    }\n  }\n  return null;\n}\nexport function findDoubleNewlineIndex(buffer) {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n  return -1;\n}","map":{"version":3,"names":["OpenAIError","LineDecoder","constructor","_LineDecoder_carriageReturnIndex","set","buffer","Uint8Array","__classPrivateFieldSet","decode","chunk","binaryChunk","ArrayBuffer","TextEncoder","encode","newData","length","lines","patternIndex","findNewlineIndex","__classPrivateFieldGet","carriage","index","push","decodeText","slice","endIndex","preceding","line","bytes","Buffer","toString","from","name","TextDecoder","textDecoder","flush","NEWLINE_CHARS","Set","NEWLINE_REGEXP","startIndex","newline","i","findDoubleNewlineIndex"],"sources":["/Users/tato/repo/github/tatoflam/logo-generator-app/node_modules/openai/src/internal/decoders/line.ts"],"sourcesContent":["import { OpenAIError } from '../../error';\n\nexport type Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\n\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n  // prettier-ignore\n  static NEWLINE_CHARS = new Set(['\\n', '\\r']);\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n\n  buffer: Uint8Array;\n  #carriageReturnIndex: number | null;\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\n\n  constructor() {\n    this.buffer = new Uint8Array();\n    this.#carriageReturnIndex = null;\n  }\n\n  decode(chunk: Bytes): string[] {\n    if (chunk == null) {\n      return [];\n    }\n\n    const binaryChunk =\n      chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n      : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n      : chunk;\n\n    let newData = new Uint8Array(this.buffer.length + binaryChunk.length);\n    newData.set(this.buffer);\n    newData.set(binaryChunk, this.buffer.length);\n    this.buffer = newData;\n\n    const lines: string[] = [];\n    let patternIndex;\n    while ((patternIndex = findNewlineIndex(this.buffer, this.#carriageReturnIndex)) != null) {\n      if (patternIndex.carriage && this.#carriageReturnIndex == null) {\n        // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n        this.#carriageReturnIndex = patternIndex.index;\n        continue;\n      }\n\n      // we got double \\r or \\rtext\\n\n      if (\n        this.#carriageReturnIndex != null &&\n        (patternIndex.index !== this.#carriageReturnIndex + 1 || patternIndex.carriage)\n      ) {\n        lines.push(this.decodeText(this.buffer.slice(0, this.#carriageReturnIndex - 1)));\n        this.buffer = this.buffer.slice(this.#carriageReturnIndex);\n        this.#carriageReturnIndex = null;\n        continue;\n      }\n\n      const endIndex =\n        this.#carriageReturnIndex !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n\n      const line = this.decodeText(this.buffer.slice(0, endIndex));\n      lines.push(line);\n\n      this.buffer = this.buffer.slice(patternIndex.index);\n      this.#carriageReturnIndex = null;\n    }\n\n    return lines;\n  }\n\n  decodeText(bytes: Bytes): string {\n    if (bytes == null) return '';\n    if (typeof bytes === 'string') return bytes;\n\n    // Node:\n    if (typeof Buffer !== 'undefined') {\n      if (bytes instanceof Buffer) {\n        return bytes.toString();\n      }\n      if (bytes instanceof Uint8Array) {\n        return Buffer.from(bytes).toString();\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\n      );\n    }\n\n    // Browser\n    if (typeof TextDecoder !== 'undefined') {\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n        this.textDecoder ??= new TextDecoder('utf8');\n        return this.textDecoder.decode(bytes);\n      }\n\n      throw new OpenAIError(\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\n          (bytes as any).constructor.name\n        }) in a web platform. Please report this error.`,\n      );\n    }\n\n    throw new OpenAIError(\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\n    );\n  }\n\n  flush(): string[] {\n    if (!this.buffer.length) {\n      return [];\n    }\n    return this.decode('\\n');\n  }\n}\n\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(\n  buffer: Uint8Array,\n  startIndex: number | null,\n): { preceding: number; index: number; carriage: boolean } | null {\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = startIndex ?? 0; i < buffer.length; i++) {\n    if (buffer[i] === newline) {\n      return { preceding: i, index: i + 1, carriage: false };\n    }\n\n    if (buffer[i] === carriage) {\n      return { preceding: i, index: i + 1, carriage: true };\n    }\n  }\n\n  return null;\n}\n\nexport function findDoubleNewlineIndex(buffer: Uint8Array): number {\n  // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n  // and returns the index right after the first occurrence of any pattern,\n  // or -1 if none of the patterns are found.\n  const newline = 0x0a; // \\n\n  const carriage = 0x0d; // \\r\n\n  for (let i = 0; i < buffer.length - 1; i++) {\n    if (buffer[i] === newline && buffer[i + 1] === newline) {\n      // \\n\\n\n      return i + 2;\n    }\n    if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n      // \\r\\r\n      return i + 2;\n    }\n    if (\n      buffer[i] === carriage &&\n      buffer[i + 1] === newline &&\n      i + 3 < buffer.length &&\n      buffer[i + 2] === carriage &&\n      buffer[i + 3] === newline\n    ) {\n      // \\r\\n\\r\\n\n      return i + 4;\n    }\n  }\n\n  return -1;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}