{"version":3,"file":"static/js/316.da5190eb.chunk.js","mappings":"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","sources":["../node_modules/html-to-image/src/util.ts","../node_modules/html-to-image/src/clone-pseudos.ts","../node_modules/html-to-image/src/mimes.ts","../node_modules/html-to-image/src/dataurl.ts","../node_modules/html-to-image/src/clone-node.ts","../node_modules/html-to-image/src/embed-resources.ts","../node_modules/html-to-image/src/embed-images.ts","../node_modules/html-to-image/src/embed-webfonts.ts","../node_modules/html-to-image/src/index.ts","../node_modules/html-to-image/src/apply-style.ts"],"sourcesContent":["import type { Options } from './types'\n\nexport function resolveUrl(url: string, baseUrl: string | null): string {\n  // url is absolute already\n  if (url.match(/^[a-z]+:\\/\\//i)) {\n    return url\n  }\n\n  // url is absolute already, without protocol\n  if (url.match(/^\\/\\//)) {\n    return window.location.protocol + url\n  }\n\n  // dataURI, mailto:, tel:, etc.\n  if (url.match(/^[a-z]+:/i)) {\n    return url\n  }\n\n  const doc = document.implementation.createHTMLDocument()\n  const base = doc.createElement('base')\n  const a = doc.createElement('a')\n\n  doc.head.appendChild(base)\n  doc.body.appendChild(a)\n\n  if (baseUrl) {\n    base.href = baseUrl\n  }\n\n  a.href = url\n\n  return a.href\n}\n\nexport const uuid = (() => {\n  // generate uuid for className of pseudo elements.\n  // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n  let counter = 0\n\n  // ref: http://stackoverflow.com/a/6248722/2519373\n  const random = () =>\n    // eslint-disable-next-line no-bitwise\n    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4)\n\n  return () => {\n    counter += 1\n    return `u${random()}${counter}`\n  }\n})()\n\nexport function delay<T>(ms: number) {\n  return (args: T) =>\n    new Promise<T>((resolve) => {\n      setTimeout(() => resolve(args), ms)\n    })\n}\n\nexport function toArray<T>(arrayLike: any): T[] {\n  const arr: T[] = []\n\n  for (let i = 0, l = arrayLike.length; i < l; i++) {\n    arr.push(arrayLike[i])\n  }\n\n  return arr\n}\n\nlet styleProps: string[] | null = null\nexport function getStyleProperties(options: Options = {}): string[] {\n  if (styleProps) {\n    return styleProps\n  }\n\n  if (options.includeStyleProperties) {\n    styleProps = options.includeStyleProperties\n    return styleProps\n  }\n\n  styleProps = toArray(window.getComputedStyle(document.documentElement))\n\n  return styleProps\n}\n\nfunction px(node: HTMLElement, styleProperty: string) {\n  const win = node.ownerDocument.defaultView || window\n  const val = win.getComputedStyle(node).getPropertyValue(styleProperty)\n  return val ? parseFloat(val.replace('px', '')) : 0\n}\n\nfunction getNodeWidth(node: HTMLElement) {\n  const leftBorder = px(node, 'border-left-width')\n  const rightBorder = px(node, 'border-right-width')\n  return node.clientWidth + leftBorder + rightBorder\n}\n\nfunction getNodeHeight(node: HTMLElement) {\n  const topBorder = px(node, 'border-top-width')\n  const bottomBorder = px(node, 'border-bottom-width')\n  return node.clientHeight + topBorder + bottomBorder\n}\n\nexport function getImageSize(targetNode: HTMLElement, options: Options = {}) {\n  const width = options.width || getNodeWidth(targetNode)\n  const height = options.height || getNodeHeight(targetNode)\n\n  return { width, height }\n}\n\nexport function getPixelRatio() {\n  let ratio\n\n  let FINAL_PROCESS\n  try {\n    FINAL_PROCESS = process\n  } catch (e) {\n    // pass\n  }\n\n  const val =\n    FINAL_PROCESS && FINAL_PROCESS.env\n      ? FINAL_PROCESS.env.devicePixelRatio\n      : null\n  if (val) {\n    ratio = parseInt(val, 10)\n    if (Number.isNaN(ratio)) {\n      ratio = 1\n    }\n  }\n  return ratio || window.devicePixelRatio || 1\n}\n\n// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\nconst canvasDimensionLimit = 16384\n\nexport function checkCanvasDimensions(canvas: HTMLCanvasElement) {\n  if (\n    canvas.width > canvasDimensionLimit ||\n    canvas.height > canvasDimensionLimit\n  ) {\n    if (\n      canvas.width > canvasDimensionLimit &&\n      canvas.height > canvasDimensionLimit\n    ) {\n      if (canvas.width > canvas.height) {\n        canvas.height *= canvasDimensionLimit / canvas.width\n        canvas.width = canvasDimensionLimit\n      } else {\n        canvas.width *= canvasDimensionLimit / canvas.height\n        canvas.height = canvasDimensionLimit\n      }\n    } else if (canvas.width > canvasDimensionLimit) {\n      canvas.height *= canvasDimensionLimit / canvas.width\n      canvas.width = canvasDimensionLimit\n    } else {\n      canvas.width *= canvasDimensionLimit / canvas.height\n      canvas.height = canvasDimensionLimit\n    }\n  }\n}\n\nexport function canvasToBlob(\n  canvas: HTMLCanvasElement,\n  options: Options = {},\n): Promise<Blob | null> {\n  if (canvas.toBlob) {\n    return new Promise((resolve) => {\n      canvas.toBlob(\n        resolve,\n        options.type ? options.type : 'image/png',\n        options.quality ? options.quality : 1,\n      )\n    })\n  }\n\n  return new Promise((resolve) => {\n    const binaryString = window.atob(\n      canvas\n        .toDataURL(\n          options.type ? options.type : undefined,\n          options.quality ? options.quality : undefined,\n        )\n        .split(',')[1],\n    )\n    const len = binaryString.length\n    const binaryArray = new Uint8Array(len)\n\n    for (let i = 0; i < len; i += 1) {\n      binaryArray[i] = binaryString.charCodeAt(i)\n    }\n\n    resolve(\n      new Blob([binaryArray], {\n        type: options.type ? options.type : 'image/png',\n      }),\n    )\n  })\n}\n\nexport function createImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.onload = () => {\n      img.decode().then(() => {\n        requestAnimationFrame(() => resolve(img))\n      })\n    }\n    img.onerror = reject\n    img.crossOrigin = 'anonymous'\n    img.decoding = 'async'\n    img.src = url\n  })\n}\n\nexport async function svgToDataURL(svg: SVGElement): Promise<string> {\n  return Promise.resolve()\n    .then(() => new XMLSerializer().serializeToString(svg))\n    .then(encodeURIComponent)\n    .then((html) => `data:image/svg+xml;charset=utf-8,${html}`)\n}\n\nexport async function nodeToDataURL(\n  node: HTMLElement,\n  width: number,\n  height: number,\n): Promise<string> {\n  const xmlns = 'http://www.w3.org/2000/svg'\n  const svg = document.createElementNS(xmlns, 'svg')\n  const foreignObject = document.createElementNS(xmlns, 'foreignObject')\n\n  svg.setAttribute('width', `${width}`)\n  svg.setAttribute('height', `${height}`)\n  svg.setAttribute('viewBox', `0 0 ${width} ${height}`)\n\n  foreignObject.setAttribute('width', '100%')\n  foreignObject.setAttribute('height', '100%')\n  foreignObject.setAttribute('x', '0')\n  foreignObject.setAttribute('y', '0')\n  foreignObject.setAttribute('externalResourcesRequired', 'true')\n\n  svg.appendChild(foreignObject)\n  foreignObject.appendChild(node)\n  return svgToDataURL(svg)\n}\n\nexport const isInstanceOfElement = <\n  T extends typeof Element | typeof HTMLElement | typeof SVGImageElement,\n>(\n  node: Element | HTMLElement | SVGImageElement,\n  instance: T,\n): node is T['prototype'] => {\n  if (node instanceof instance) return true\n\n  const nodePrototype = Object.getPrototypeOf(node)\n\n  if (nodePrototype === null) return false\n\n  return (\n    nodePrototype.constructor.name === instance.name ||\n    isInstanceOfElement(nodePrototype, instance)\n  )\n}\n","import type { Options } from './types'\nimport { uuid, getStyleProperties } from './util'\n\ntype Pseudo = ':before' | ':after'\n\nfunction formatCSSText(style: CSSStyleDeclaration) {\n  const content = style.getPropertyValue('content')\n  return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`\n}\n\nfunction formatCSSProperties(style: CSSStyleDeclaration, options: Options) {\n  return getStyleProperties(options)\n    .map((name) => {\n      const value = style.getPropertyValue(name)\n      const priority = style.getPropertyPriority(name)\n\n      return `${name}: ${value}${priority ? ' !important' : ''};`\n    })\n    .join(' ')\n}\n\nfunction getPseudoElementStyle(\n  className: string,\n  pseudo: Pseudo,\n  style: CSSStyleDeclaration,\n  options: Options,\n): Text {\n  const selector = `.${className}:${pseudo}`\n  const cssText = style.cssText\n    ? formatCSSText(style)\n    : formatCSSProperties(style, options)\n\n  return document.createTextNode(`${selector}{${cssText}}`)\n}\n\nfunction clonePseudoElement<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  pseudo: Pseudo,\n  options: Options,\n) {\n  const style = window.getComputedStyle(nativeNode, pseudo)\n  const content = style.getPropertyValue('content')\n  if (content === '' || content === 'none') {\n    return\n  }\n\n  const className = uuid()\n  try {\n    clonedNode.className = `${clonedNode.className} ${className}`\n  } catch (err) {\n    return\n  }\n\n  const styleElement = document.createElement('style')\n  styleElement.appendChild(\n    getPseudoElementStyle(className, pseudo, style, options),\n  )\n  clonedNode.appendChild(styleElement)\n}\n\nexport function clonePseudoElements<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n) {\n  clonePseudoElement(nativeNode, clonedNode, ':before', options)\n  clonePseudoElement(nativeNode, clonedNode, ':after', options)\n}\n","const WOFF = 'application/font-woff'\nconst JPEG = 'image/jpeg'\nconst mimes: { [key: string]: string } = {\n  woff: WOFF,\n  woff2: WOFF,\n  ttf: 'application/font-truetype',\n  eot: 'application/vnd.ms-fontobject',\n  png: 'image/png',\n  jpg: JPEG,\n  jpeg: JPEG,\n  gif: 'image/gif',\n  tiff: 'image/tiff',\n  svg: 'image/svg+xml',\n  webp: 'image/webp',\n}\n\nfunction getExtension(url: string): string {\n  const match = /\\.([^./]*?)$/g.exec(url)\n  return match ? match[1] : ''\n}\n\nexport function getMimeType(url: string): string {\n  const extension = getExtension(url).toLowerCase()\n  return mimes[extension] || ''\n}\n","import { Options } from './types'\n\nfunction getContentFromDataUrl(dataURL: string) {\n  return dataURL.split(/,/)[1]\n}\n\nexport function isDataUrl(url: string) {\n  return url.search(/^(data:)/) !== -1\n}\n\nexport function makeDataUrl(content: string, mimeType: string) {\n  return `data:${mimeType};base64,${content}`\n}\n\nexport async function fetchAsDataURL<T>(\n  url: string,\n  init: RequestInit | undefined,\n  process: (data: { result: string; res: Response }) => T,\n): Promise<T> {\n  const res = await fetch(url, init)\n  if (res.status === 404) {\n    throw new Error(`Resource \"${res.url}\" not found`)\n  }\n  const blob = await res.blob()\n  return new Promise<T>((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onerror = reject\n    reader.onloadend = () => {\n      try {\n        resolve(process({ res, result: reader.result as string }))\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    reader.readAsDataURL(blob)\n  })\n}\n\nconst cache: { [url: string]: string } = {}\n\nfunction getCacheKey(\n  url: string,\n  contentType: string | undefined,\n  includeQueryParams: boolean | undefined,\n) {\n  let key = url.replace(/\\?.*/, '')\n\n  if (includeQueryParams) {\n    key = url\n  }\n\n  // font resource\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '')\n  }\n\n  return contentType ? `[${contentType}]${key}` : key\n}\n\nexport async function resourceToDataURL(\n  resourceUrl: string,\n  contentType: string | undefined,\n  options: Options,\n) {\n  const cacheKey = getCacheKey(\n    resourceUrl,\n    contentType,\n    options.includeQueryParams,\n  )\n\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey]\n  }\n\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime()\n  }\n\n  let dataURL: string\n  try {\n    const content = await fetchAsDataURL(\n      resourceUrl,\n      options.fetchRequestInit,\n      ({ res, result }) => {\n        if (!contentType) {\n          // eslint-disable-next-line no-param-reassign\n          contentType = res.headers.get('Content-Type') || ''\n        }\n        return getContentFromDataUrl(result)\n      },\n    )\n    dataURL = makeDataUrl(content, contentType!)\n  } catch (error) {\n    dataURL = options.imagePlaceholder || ''\n\n    let msg = `Failed to fetch resource: ${resourceUrl}`\n    if (error) {\n      msg = typeof error === 'string' ? error : error.message\n    }\n\n    if (msg) {\n      console.warn(msg)\n    }\n  }\n\n  cache[cacheKey] = dataURL\n  return dataURL\n}\n","import type { Options } from './types'\nimport { clonePseudoElements } from './clone-pseudos'\nimport {\n  createImage,\n  toArray,\n  isInstanceOfElement,\n  getStyleProperties,\n} from './util'\nimport { getMimeType } from './mimes'\nimport { resourceToDataURL } from './dataurl'\n\nasync function cloneCanvasElement(canvas: HTMLCanvasElement) {\n  const dataURL = canvas.toDataURL()\n  if (dataURL === 'data:,') {\n    return canvas.cloneNode(false) as HTMLCanvasElement\n  }\n  return createImage(dataURL)\n}\n\nasync function cloneVideoElement(video: HTMLVideoElement, options: Options) {\n  if (video.currentSrc) {\n    const canvas = document.createElement('canvas')\n    const ctx = canvas.getContext('2d')\n    canvas.width = video.clientWidth\n    canvas.height = video.clientHeight\n    ctx?.drawImage(video, 0, 0, canvas.width, canvas.height)\n    const dataURL = canvas.toDataURL()\n    return createImage(dataURL)\n  }\n\n  const poster = video.poster\n  const contentType = getMimeType(poster)\n  const dataURL = await resourceToDataURL(poster, contentType, options)\n  return createImage(dataURL)\n}\n\nasync function cloneIFrameElement(iframe: HTMLIFrameElement, options: Options) {\n  try {\n    if (iframe?.contentDocument?.body) {\n      return (await cloneNode(\n        iframe.contentDocument.body,\n        options,\n        true,\n      )) as HTMLBodyElement\n    }\n  } catch {\n    // Failed to clone iframe\n  }\n\n  return iframe.cloneNode(false) as HTMLIFrameElement\n}\n\nasync function cloneSingleNode<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<HTMLElement> {\n  if (isInstanceOfElement(node, HTMLCanvasElement)) {\n    return cloneCanvasElement(node)\n  }\n\n  if (isInstanceOfElement(node, HTMLVideoElement)) {\n    return cloneVideoElement(node, options)\n  }\n\n  if (isInstanceOfElement(node, HTMLIFrameElement)) {\n    return cloneIFrameElement(node, options)\n  }\n\n  return node.cloneNode(isSVGElement(node)) as T\n}\n\nconst isSlotElement = (node: HTMLElement): node is HTMLSlotElement =>\n  node.tagName != null && node.tagName.toUpperCase() === 'SLOT'\n\nconst isSVGElement = (node: HTMLElement): node is HTMLSlotElement =>\n  node.tagName != null && node.tagName.toUpperCase() === 'SVG'\n\nasync function cloneChildren<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n): Promise<T> {\n  if (isSVGElement(clonedNode)) {\n    return clonedNode\n  }\n\n  let children: T[] = []\n\n  if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {\n    children = toArray<T>(nativeNode.assignedNodes())\n  } else if (\n    isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n    nativeNode.contentDocument?.body\n  ) {\n    children = toArray<T>(nativeNode.contentDocument.body.childNodes)\n  } else {\n    children = toArray<T>((nativeNode.shadowRoot ?? nativeNode).childNodes)\n  }\n\n  if (\n    children.length === 0 ||\n    isInstanceOfElement(nativeNode, HTMLVideoElement)\n  ) {\n    return clonedNode\n  }\n\n  await children.reduce(\n    (deferred, child) =>\n      deferred\n        .then(() => cloneNode(child, options))\n        .then((clonedChild: HTMLElement | null) => {\n          if (clonedChild) {\n            clonedNode.appendChild(clonedChild)\n          }\n        }),\n    Promise.resolve(),\n  )\n\n  return clonedNode\n}\n\nfunction cloneCSSStyle<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n) {\n  const targetStyle = clonedNode.style\n  if (!targetStyle) {\n    return\n  }\n\n  const sourceStyle = window.getComputedStyle(nativeNode)\n  if (sourceStyle.cssText) {\n    targetStyle.cssText = sourceStyle.cssText\n    targetStyle.transformOrigin = sourceStyle.transformOrigin\n  } else {\n    getStyleProperties(options).forEach((name) => {\n      let value = sourceStyle.getPropertyValue(name)\n      if (name === 'font-size' && value.endsWith('px')) {\n        const reducedFont =\n          Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1\n        value = `${reducedFont}px`\n      }\n\n      if (\n        isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n        name === 'display' &&\n        value === 'inline'\n      ) {\n        value = 'block'\n      }\n\n      if (name === 'd' && clonedNode.getAttribute('d')) {\n        value = `path(${clonedNode.getAttribute('d')})`\n      }\n\n      targetStyle.setProperty(\n        name,\n        value,\n        sourceStyle.getPropertyPriority(name),\n      )\n    })\n  }\n}\n\nfunction cloneInputValue<T extends HTMLElement>(nativeNode: T, clonedNode: T) {\n  if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {\n    clonedNode.innerHTML = nativeNode.value\n  }\n\n  if (isInstanceOfElement(nativeNode, HTMLInputElement)) {\n    clonedNode.setAttribute('value', nativeNode.value)\n  }\n}\n\nfunction cloneSelectValue<T extends HTMLElement>(nativeNode: T, clonedNode: T) {\n  if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {\n    const clonedSelect = clonedNode as any as HTMLSelectElement\n    const selectedOption = Array.from(clonedSelect.children).find(\n      (child) => nativeNode.value === child.getAttribute('value'),\n    )\n\n    if (selectedOption) {\n      selectedOption.setAttribute('selected', '')\n    }\n  }\n}\n\nfunction decorate<T extends HTMLElement>(\n  nativeNode: T,\n  clonedNode: T,\n  options: Options,\n): T {\n  if (isInstanceOfElement(clonedNode, Element)) {\n    cloneCSSStyle(nativeNode, clonedNode, options)\n    clonePseudoElements(nativeNode, clonedNode, options)\n    cloneInputValue(nativeNode, clonedNode)\n    cloneSelectValue(nativeNode, clonedNode)\n  }\n\n  return clonedNode\n}\n\nasync function ensureSVGSymbols<T extends HTMLElement>(\n  clone: T,\n  options: Options,\n) {\n  const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : []\n  if (uses.length === 0) {\n    return clone\n  }\n\n  const processedDefs: { [key: string]: HTMLElement } = {}\n  for (let i = 0; i < uses.length; i++) {\n    const use = uses[i]\n    const id = use.getAttribute('xlink:href')\n    if (id) {\n      const exist = clone.querySelector(id)\n      const definition = document.querySelector(id) as HTMLElement\n      if (!exist && definition && !processedDefs[id]) {\n        // eslint-disable-next-line no-await-in-loop\n        processedDefs[id] = (await cloneNode(definition, options, true))!\n      }\n    }\n  }\n\n  const nodes = Object.values(processedDefs)\n  if (nodes.length) {\n    const ns = 'http://www.w3.org/1999/xhtml'\n    const svg = document.createElementNS(ns, 'svg')\n    svg.setAttribute('xmlns', ns)\n    svg.style.position = 'absolute'\n    svg.style.width = '0'\n    svg.style.height = '0'\n    svg.style.overflow = 'hidden'\n    svg.style.display = 'none'\n\n    const defs = document.createElementNS(ns, 'defs')\n    svg.appendChild(defs)\n\n    for (let i = 0; i < nodes.length; i++) {\n      defs.appendChild(nodes[i])\n    }\n\n    clone.appendChild(svg)\n  }\n\n  return clone\n}\n\nexport async function cloneNode<T extends HTMLElement>(\n  node: T,\n  options: Options,\n  isRoot?: boolean,\n): Promise<T | null> {\n  if (!isRoot && options.filter && !options.filter(node)) {\n    return null\n  }\n\n  return Promise.resolve(node)\n    .then((clonedNode) => cloneSingleNode(clonedNode, options) as Promise<T>)\n    .then((clonedNode) => cloneChildren(node, clonedNode, options))\n    .then((clonedNode) => decorate(node, clonedNode, options))\n    .then((clonedNode) => ensureSVGSymbols(clonedNode, options))\n}\n","import { Options } from './types'\nimport { resolveUrl } from './util'\nimport { getMimeType } from './mimes'\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl'\n\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g\n\nfunction toRegex(url: string): RegExp {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1')\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g')\n}\n\nexport function parseURLs(cssText: string): string[] {\n  const urls: string[] = []\n\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    urls.push(url)\n    return raw\n  })\n\n  return urls.filter((url) => !isDataUrl(url))\n}\n\nexport async function embed(\n  cssText: string,\n  resourceURL: string,\n  baseURL: string | null,\n  options: Options,\n  getContentFromUrl?: (url: string) => Promise<string>,\n): Promise<string> {\n  try {\n    const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL\n    const contentType = getMimeType(resourceURL)\n    let dataURL: string\n    if (getContentFromUrl) {\n      const content = await getContentFromUrl(resolvedURL)\n      dataURL = makeDataUrl(content, contentType)\n    } else {\n      dataURL = await resourceToDataURL(resolvedURL, contentType, options)\n    }\n    return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`)\n  } catch (error) {\n    // pass\n  }\n  return cssText\n}\n\nfunction filterPreferredFontFormat(\n  str: string,\n  { preferredFontFormat }: Options,\n): string {\n  return !preferredFontFormat\n    ? str\n    : str.replace(FONT_SRC_REGEX, (match: string) => {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || []\n          if (!format) {\n            return ''\n          }\n\n          if (format === preferredFontFormat) {\n            return `src: ${src};`\n          }\n        }\n      })\n}\n\nexport function shouldEmbed(url: string): boolean {\n  return url.search(URL_REGEX) !== -1\n}\n\nexport async function embedResources(\n  cssText: string,\n  baseUrl: string | null,\n  options: Options,\n): Promise<string> {\n  if (!shouldEmbed(cssText)) {\n    return cssText\n  }\n\n  const filteredCSSText = filterPreferredFontFormat(cssText, options)\n  const urls = parseURLs(filteredCSSText)\n  return urls.reduce(\n    (deferred, url) =>\n      deferred.then((css) => embed(css, url, baseUrl, options)),\n    Promise.resolve(filteredCSSText),\n  )\n}\n","import { Options } from './types'\nimport { embedResources } from './embed-resources'\nimport { toArray, isInstanceOfElement } from './util'\nimport { isDataUrl, resourceToDataURL } from './dataurl'\nimport { getMimeType } from './mimes'\n\nasync function embedProp(\n  propName: string,\n  node: HTMLElement,\n  options: Options,\n) {\n  const propValue = node.style?.getPropertyValue(propName)\n  if (propValue) {\n    const cssString = await embedResources(propValue, null, options)\n    node.style.setProperty(\n      propName,\n      cssString,\n      node.style.getPropertyPriority(propName),\n    )\n    return true\n  }\n  return false\n}\n\nasync function embedBackground<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  ;(await embedProp('background', clonedNode, options)) ||\n    (await embedProp('background-image', clonedNode, options))\n  ;(await embedProp('mask', clonedNode, options)) ||\n    (await embedProp('-webkit-mask', clonedNode, options)) ||\n    (await embedProp('mask-image', clonedNode, options)) ||\n    (await embedProp('-webkit-mask-image', clonedNode, options))\n}\n\nasync function embedImageNode<T extends HTMLElement | SVGImageElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement)\n\n  if (\n    !(isImageElement && !isDataUrl(clonedNode.src)) &&\n    !(\n      isInstanceOfElement(clonedNode, SVGImageElement) &&\n      !isDataUrl(clonedNode.href.baseVal)\n    )\n  ) {\n    return\n  }\n\n  const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal\n\n  const dataURL = await resourceToDataURL(url, getMimeType(url), options)\n  await new Promise((resolve, reject) => {\n    clonedNode.onload = resolve\n    clonedNode.onerror = options.onImageErrorHandler\n      ? (...attributes) => {\n          try {\n            resolve(options.onImageErrorHandler!(...attributes))\n          } catch (error) {\n            reject(error)\n          }\n        }\n      : reject\n\n    const image = clonedNode as HTMLImageElement\n    if (image.decode) {\n      image.decode = resolve as any\n    }\n\n    if (image.loading === 'lazy') {\n      image.loading = 'eager'\n    }\n\n    if (isImageElement) {\n      clonedNode.srcset = ''\n      clonedNode.src = dataURL\n    } else {\n      clonedNode.href.baseVal = dataURL\n    }\n  })\n}\n\nasync function embedChildren<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const children = toArray<HTMLElement>(clonedNode.childNodes)\n  const deferreds = children.map((child) => embedImages(child, options))\n  await Promise.all(deferreds).then(() => clonedNode)\n}\n\nexport async function embedImages<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  if (isInstanceOfElement(clonedNode, Element)) {\n    await embedBackground(clonedNode, options)\n    await embedImageNode(clonedNode, options)\n    await embedChildren(clonedNode, options)\n  }\n}\n","import type { Options } from './types'\nimport { toArray } from './util'\nimport { fetchAsDataURL } from './dataurl'\nimport { shouldEmbed, embedResources } from './embed-resources'\n\ninterface Metadata {\n  url: string\n  cssText: string\n}\n\nconst cssFetchCache: { [href: string]: Metadata } = {}\n\nasync function fetchCSS(url: string) {\n  let cache = cssFetchCache[url]\n  if (cache != null) {\n    return cache\n  }\n\n  const res = await fetch(url)\n  const cssText = await res.text()\n  cache = { url, cssText }\n\n  cssFetchCache[url] = cache\n\n  return cache\n}\n\nasync function embedFonts(data: Metadata, options: Options): Promise<string> {\n  let cssText = data.cssText\n  const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g\n  const fontLocs = cssText.match(/url\\([^)]+\\)/g) || []\n  const loadFonts = fontLocs.map(async (loc: string) => {\n    let url = loc.replace(regexUrl, '$1')\n    if (!url.startsWith('https://')) {\n      url = new URL(url, data.url).href\n    }\n\n    return fetchAsDataURL<[string, string]>(\n      url,\n      options.fetchRequestInit,\n      ({ result }) => {\n        cssText = cssText.replace(loc, `url(${result})`)\n        return [loc, result]\n      },\n    )\n  })\n\n  return Promise.all(loadFonts).then(() => cssText)\n}\n\nfunction parseCSS(source: string) {\n  if (source == null) {\n    return []\n  }\n\n  const result: string[] = []\n  const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi\n  // strip out comments\n  let cssText = source.replace(commentsRegex, '')\n\n  // eslint-disable-next-line prefer-regex-literals\n  const keyframesRegex = new RegExp(\n    '((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})',\n    'gi',\n  )\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const matches = keyframesRegex.exec(cssText)\n    if (matches === null) {\n      break\n    }\n    result.push(matches[0])\n  }\n  cssText = cssText.replace(keyframesRegex, '')\n\n  const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi\n  // to match css & media queries together\n  const combinedCSSRegex =\n    '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n    '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'\n  // unified regex\n  const unifiedRegex = new RegExp(combinedCSSRegex, 'gi')\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let matches = importRegex.exec(cssText)\n    if (matches === null) {\n      matches = unifiedRegex.exec(cssText)\n      if (matches === null) {\n        break\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex\n    }\n    result.push(matches[0])\n  }\n\n  return result\n}\n\nasync function getCSSRules(\n  styleSheets: CSSStyleSheet[],\n  options: Options,\n): Promise<CSSStyleRule[]> {\n  const ret: CSSStyleRule[] = []\n  const deferreds: Promise<number | void>[] = []\n\n  // First loop inlines imports\n  styleSheets.forEach((sheet) => {\n    if ('cssRules' in sheet) {\n      try {\n        toArray<CSSRule>(sheet.cssRules || []).forEach((item, index) => {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            let importIndex = index + 1\n            const url = (item as CSSImportRule).href\n            const deferred = fetchCSS(url)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  try {\n                    sheet.insertRule(\n                      rule,\n                      rule.startsWith('@import')\n                        ? (importIndex += 1)\n                        : sheet.cssRules.length,\n                    )\n                  } catch (error) {\n                    console.error('Error inserting rule from remote css', {\n                      rule,\n                      error,\n                    })\n                  }\n                }),\n              )\n              .catch((e) => {\n                console.error('Error loading remote css', e.toString())\n              })\n\n            deferreds.push(deferred)\n          }\n        })\n      } catch (e) {\n        const inline =\n          styleSheets.find((a) => a.href == null) || document.styleSheets[0]\n        if (sheet.href != null) {\n          deferreds.push(\n            fetchCSS(sheet.href)\n              .then((metadata) => embedFonts(metadata, options))\n              .then((cssText) =>\n                parseCSS(cssText).forEach((rule) => {\n                  inline.insertRule(rule, inline.cssRules.length)\n                }),\n              )\n              .catch((err: unknown) => {\n                console.error('Error loading remote stylesheet', err)\n              }),\n          )\n        }\n        console.error('Error inlining remote css file', e)\n      }\n    }\n  })\n\n  return Promise.all(deferreds).then(() => {\n    // Second loop parses rules\n    styleSheets.forEach((sheet) => {\n      if ('cssRules' in sheet) {\n        try {\n          toArray<CSSStyleRule>(sheet.cssRules || []).forEach((item) => {\n            ret.push(item)\n          })\n        } catch (e) {\n          console.error(`Error while reading CSS rules from ${sheet.href}`, e)\n        }\n      }\n    })\n\n    return ret\n  })\n}\n\nfunction getWebFontRules(cssRules: CSSStyleRule[]): CSSStyleRule[] {\n  return cssRules\n    .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n    .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')))\n}\n\nasync function parseWebFontRules<T extends HTMLElement>(\n  node: T,\n  options: Options,\n) {\n  if (node.ownerDocument == null) {\n    throw new Error('Provided element is not within a Document')\n  }\n\n  const styleSheets = toArray<CSSStyleSheet>(node.ownerDocument.styleSheets)\n  const cssRules = await getCSSRules(styleSheets, options)\n\n  return getWebFontRules(cssRules)\n}\n\nfunction normalizeFontFamily(font: string) {\n  return font.trim().replace(/[\"']/g, '')\n}\n\nfunction getUsedFonts(node: HTMLElement) {\n  const fonts = new Set<string>()\n  function traverse(node: HTMLElement) {\n    const fontFamily =\n      node.style.fontFamily || getComputedStyle(node).fontFamily\n    fontFamily.split(',').forEach((font) => {\n      fonts.add(normalizeFontFamily(font))\n    })\n\n    Array.from(node.children).forEach((child) => {\n      if (child instanceof HTMLElement) {\n        traverse(child)\n      }\n    })\n  }\n  traverse(node)\n  return fonts\n}\n\nexport async function getWebFontCSS<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): Promise<string> {\n  const rules = await parseWebFontRules(node, options)\n  const usedFonts = getUsedFonts(node)\n  const cssTexts = await Promise.all(\n    rules\n      .filter((rule) =>\n        usedFonts.has(normalizeFontFamily(rule.style.fontFamily)),\n      )\n      .map((rule) => {\n        const baseUrl = rule.parentStyleSheet\n          ? rule.parentStyleSheet.href\n          : null\n        return embedResources(rule.cssText, baseUrl, options)\n      }),\n  )\n\n  return cssTexts.join('\\n')\n}\n\nexport async function embedWebFonts<T extends HTMLElement>(\n  clonedNode: T,\n  options: Options,\n) {\n  const cssText =\n    options.fontEmbedCSS != null\n      ? options.fontEmbedCSS\n      : options.skipFonts\n      ? null\n      : await getWebFontCSS(clonedNode, options)\n\n  if (cssText) {\n    const styleNode = document.createElement('style')\n    const sytleContent = document.createTextNode(cssText)\n\n    styleNode.appendChild(sytleContent)\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild)\n    } else {\n      clonedNode.appendChild(styleNode)\n    }\n  }\n}\n","import { Options } from './types'\nimport { cloneNode } from './clone-node'\nimport { embedImages } from './embed-images'\nimport { applyStyle } from './apply-style'\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts'\nimport {\n  getImageSize,\n  getPixelRatio,\n  createImage,\n  canvasToBlob,\n  nodeToDataURL,\n  checkCanvasDimensions,\n} from './util'\n\nexport async function toSvg<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const { width, height } = getImageSize(node, options)\n  const clonedNode = (await cloneNode(node, options, true)) as HTMLElement\n  await embedWebFonts(clonedNode, options)\n  await embedImages(clonedNode, options)\n  applyStyle(clonedNode, options)\n  const datauri = await nodeToDataURL(clonedNode, width, height)\n  return datauri\n}\n\nexport async function toCanvas<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<HTMLCanvasElement> {\n  const { width, height } = getImageSize(node, options)\n  const svg = await toSvg(node, options)\n  const img = await createImage(svg)\n\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')!\n  const ratio = options.pixelRatio || getPixelRatio()\n  const canvasWidth = options.canvasWidth || width\n  const canvasHeight = options.canvasHeight || height\n\n  canvas.width = canvasWidth * ratio\n  canvas.height = canvasHeight * ratio\n\n  if (!options.skipAutoScale) {\n    checkCanvasDimensions(canvas)\n  }\n  canvas.style.width = `${canvasWidth}`\n  canvas.style.height = `${canvasHeight}`\n\n  if (options.backgroundColor) {\n    context.fillStyle = options.backgroundColor\n    context.fillRect(0, 0, canvas.width, canvas.height)\n  }\n\n  context.drawImage(img, 0, 0, canvas.width, canvas.height)\n\n  return canvas\n}\n\nexport async function toPixelData<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<Uint8ClampedArray> {\n  const { width, height } = getImageSize(node, options)\n  const canvas = await toCanvas(node, options)\n  const ctx = canvas.getContext('2d')!\n  return ctx.getImageData(0, 0, width, height).data\n}\n\nexport async function toPng<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const canvas = await toCanvas(node, options)\n  return canvas.toDataURL()\n}\n\nexport async function toJpeg<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  const canvas = await toCanvas(node, options)\n  return canvas.toDataURL('image/jpeg', options.quality || 1)\n}\n\nexport async function toBlob<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<Blob | null> {\n  const canvas = await toCanvas(node, options)\n  const blob = await canvasToBlob(canvas)\n  return blob\n}\n\nexport async function getFontEmbedCSS<T extends HTMLElement>(\n  node: T,\n  options: Options = {},\n): Promise<string> {\n  return getWebFontCSS(node, options)\n}\n","import type { Options } from './types'\n\nexport function applyStyle<T extends HTMLElement>(\n  node: T,\n  options: Options,\n): T {\n  const { style } = node\n\n  if (options.backgroundColor) {\n    style.backgroundColor = options.backgroundColor\n  }\n\n  if (options.width) {\n    style.width = `${options.width}px`\n  }\n\n  if (options.height) {\n    style.height = `${options.height}px`\n  }\n\n  const manual = options.style\n  if (manual != null) {\n    Object.keys(manual).forEach((key: any) => {\n      style[key] = manual[key] as string\n    })\n  }\n\n  return node\n}\n"],"names":["uuid","counter","concat","Math","random","toString","slice","toArray","arrayLike","arr","i","l","length","push","styleProps","getStyleProperties","options","arguments","undefined","includeStyleProperties","window","getComputedStyle","document","documentElement","px","node","styleProperty","val","ownerDocument","defaultView","getPropertyValue","parseFloat","replace","getImageSize","targetNode","width","leftBorder","rightBorder","clientWidth","getNodeWidth","height","topBorder","bottomBorder","clientHeight","getNodeHeight","canvasDimensionLimit","createImage","url","Promise","resolve","reject","img","Image","onload","decode","then","requestAnimationFrame","onerror","crossOrigin","decoding","src","async","nodeToDataURL","xmlns","svg","createElementNS","foreignObject","setAttribute","appendChild","XMLSerializer","serializeToString","encodeURIComponent","html","svgToDataURL","isInstanceOfElement","instance","nodePrototype","Object","getPrototypeOf","constructor","name","getPseudoElementStyle","className","pseudo","style","selector","cssText","content","formatCSSText","map","value","priority","getPropertyPriority","join","formatCSSProperties","createTextNode","clonePseudoElement","nativeNode","clonedNode","err","styleElement","createElement","WOFF","JPEG","mimes","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","webp","getMimeType","extension","match","exec","getExtension","toLowerCase","isDataUrl","search","makeDataUrl","mimeType","fetchAsDataURL","init","process","res","fetch","status","Error","blob","reader","FileReader","onloadend","result","error","readAsDataURL","cache","resourceToDataURL","resourceUrl","contentType","cacheKey","includeQueryParams","key","test","getCacheKey","dataURL","cacheBust","Date","getTime","fetchRequestInit","_ref","headers","get","split","getContentFromDataUrl","imagePlaceholder","msg","message","console","warn","cloneSingleNode","HTMLCanvasElement","canvas","toDataURL","cloneNode","cloneCanvasElement","HTMLVideoElement","video","currentSrc","ctx","getContext","drawImage","poster","cloneVideoElement","HTMLIFrameElement","iframe","_a","contentDocument","body","_b","cloneIFrameElement","isSVGElement","isSlotElement","tagName","toUpperCase","decorate","Element","targetStyle","sourceStyle","transformOrigin","forEach","endsWith","reducedFont","floor","substring","getAttribute","setProperty","cloneCSSStyle","clonePseudoElements","HTMLTextAreaElement","innerHTML","HTMLInputElement","cloneInputValue","HTMLSelectElement","clonedSelect","selectedOption","Array","from","children","find","child","cloneSelectValue","isRoot","filter","assignedNodes","childNodes","shadowRoot","reduce","deferred","clonedChild","cloneChildren","clone","uses","querySelectorAll","processedDefs","id","exist","querySelector","definition","nodes","values","ns","position","overflow","display","defs","ensureSVGSymbols","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","embed","resourceURL","baseURL","getContentFromUrl","resolvedURL","baseUrl","location","protocol","doc","implementation","createHTMLDocument","base","a","head","href","resolveUrl","escaped","RegExp","toRegex","shouldEmbed","embedResources","filteredCSSText","str","preferredFontFormat","format","filterPreferredFontFormat","urls","raw","quotation","parseURLs","css","embedProp","propName","propValue","cssString","embedImages","embedBackground","isImageElement","HTMLImageElement","SVGImageElement","baseVal","onImageErrorHandler","image","loading","srcset","embedImageNode","deferreds","all","embedChildren","cssFetchCache","fetchCSS","text","embedFonts","data","regexUrl","loadFonts","loc","startsWith","URL","parseCSS","source","keyframesRegex","matches","importRegex","unifiedRegex","lastIndex","parseWebFontRules","styleSheets","cssRules","ret","sheet","item","index","type","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","catch","e","inline","getCSSRules","FONT_FACE_RULE","getWebFontRules","normalizeFontFamily","font","trim","getWebFontCSS","rules","usedFonts","fonts","Set","traverse","fontFamily","add","HTMLElement","getUsedFonts","has","parentStyleSheet","toSvg","fontEmbedCSS","skipFonts","styleNode","sytleContent","firstChild","insertBefore","embedWebFonts","backgroundColor","manual","keys","applyStyle","toCanvas","context","ratio","pixelRatio","FINAL_PROCESS","env","devicePixelRatio","parseInt","Number","isNaN","getPixelRatio","canvasWidth","canvasHeight","skipAutoScale","checkCanvasDimensions","fillStyle","fillRect","toPixelData","getImageData","toPng","toJpeg","quality","toBlob","binaryString","atob","len","binaryArray","Uint8Array","charCodeAt","Blob","canvasToBlob","getFontEmbedCSS"],"sourceRoot":""}